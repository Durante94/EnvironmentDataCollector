@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@section Styles{
    <style>
        #chart-container {
            position: relative;
            margin: auto;
            height: 10vh;
            width: 100%;
        }
    </style>
}

<div class="row">
    <div class="col-sm-6 col-md-6 justify-content-around">
        <span class="">Carica Dati</span>
        <input id="file-input" type="file" multiple class="mb-2 form-control-file" />
        <button class="btn btn-info mb-1" onclick="upload(this)">Upload</button>
    </div>
    <div class="col-sm-12 col-md-6 text-right mb-3">
        <span class="mb-2">Filtri Ricerca e Esportazione:</span>
        <div id="filters-containers" class="d-flex flex-column">
            <span class="d-flex flex-row justify-content-end mb-2">
                Da:
                <input name="Date_From" class="ml-2" type="date" />
                <input name="Time_From" class="ml-1" type="time" />
            </span>
            <span class="d-flex flex-row justify-content-end mb-2">
                A:
                <input name="Date_To" class="ml-2" type="date" />
                <input name="Time_To" class="ml-1" type="time" />
            </span>
            @*Temperatura:
                <span class="d-flex flex-row justify-content-end mb-1">
                    Da:
                    <input name="Temp_From" class="ml-1" type="number" />
                </span>
                <span class="d-flex flex-row justify-content-end mb-1">
                    A:
                    <input name="Temp_To" class="ml-1" type="number" />
                </span>
                Umidit&aacute;:
                <span class="d-flex flex-row justify-content-end mb-1">
                    Da:
                    <input name="Humid_From" class="ml-1" type="number" />
                </span>
                <span class="d-flex flex-row justify-content-end mb-1">
                    A:
                    <input name="Humid_To" class="ml-1" type="number" />
                </span>*@
            <div>
                <button class="btn btn-dark" onclick="search(this)">Visualizza</button>
                <button class="btn btn-dark" onclick="exportPDF(this)">Stampa</button>
            </div>
        </div>
    </div>
    <div id="table-container" class="d-none col-12">
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th class="w-25">Data</th>
                    <th class="w-25">Temepratura</th>
                    <th class="w-25">Umidit&aacute;</th>
                    <th class="w-25">Position</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <div id="chart-container">
        <canvas class="d-none" width="400" height="100"><p>temp</p></canvas>
        <canvas class="d-none" width="400" height="100"><p>temp</p></canvas>
    </div>
</div>

@section Scripts {
    <script>
        const srvUrl = '@Url.Content("~")/',
            //CHIAVE UNIVOCA DI SALVATAGGIO DATI AMBIENTALI SU LOCAL STROAGE
            localKey = 'uploaded',
            //OPZIONI PER DATA IN STRINGA
            localeOpt = {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric'
            },
            //RACCOLTA DATI DEI FILTRI DI RICERCA
            getFilters = () => {
                const filters = {}, inputs = document.getElementById('filters-containers').getElementsByTagName('input');

                document.getElementById('table-container').classList.add('d-none');

                for (let i = 0; i < inputs.length; i++) {
                    if (inputs.item(i).value)
                        filters[inputs.item(i).name] = inputs.item(i).value;
                }

                return filters;
            },
            //VISULIZZAZIONE A SCHERMO DEI DATI IN FORMA TABELLARE
            render = json => {
                const tbody = document.getElementsByTagName('tbody').item(0);

                if (!Array.isArray(json) || json.length == 0) {
                    tbody.innerHTML = "<tr><td colspan='4'>Nessun dato trovato</td></tr>"
                } else {
                    let html = '';
                    json.forEach(obj => {
                        html += `<tr>
                                    <td>${new Date(obj.dataRilevazione).toLocaleString("it-IT", localeOpt)}</td >
                                    <td class="text-right">${obj.temperatura}</td>
                                    <td class="text-right">${obj.umidita}</td>
                                    <td class="text-right">${obj.position}</td>
                                </tr>`;
                    });

                    tbody.innerHTML = html;
                }
                document.getElementById('table-container').classList.remove('d-none');
            },
            //RESTITUZIONE DEL JSON DEI DATI DA LOCAL STORAGE SE PRESENTI
            getFromLocalStorage = filters => {
                const parsed = JSON.parse(localStorage.getItem(localKey)), toShow = [];

                if (!Array.isArray(parsed)) return toShow;

                for (let i = 0; i < parsed.length; i++) {
                    const data = new Date();
                    const day = parsed[i]['Date'].split('/'), time = parsed[i]['Time'].split(':');

                    data.setFullYear(parseInt(day[0]), parseInt(day[1]), parseInt(day[2]));
                    data.setHours(parseInt(time[0]), parseInt(time[1]), parseInt(time[2]));

                    if (filters.hasOwnProperty('Date_From')) {
                        const dateFrom = new Date(filters['Date_From']);
                        dateFrom.setDate(dateFrom.getDate() + 1);

                        if (filters.hasOwnProperty('Time_From')) {
                            timeFrom = filters['Time_From'].split(':');
                            dateFrom.setHours(parseInt(timeFrom[0]), parseInt(timeFrom[1]));
                        } else
                            dateFrom.setHours(0, 0, 0, 0);

                        if (data < dateFrom) continue;
                    }
                    if (filters.hasOwnProperty('Date_To')) {
                        const dateTo = new Date(filters['Date_To']);
                        dateTo.setDate(dateTo.getDate() + 1);

                        if (filters.hasOwnProperty('Time_To')) {
                            timeTo = filters['Time_To'].split(':');
                            dateTo.setHours(parseInt(timeTo[0]), parseInt(timeTo[1]));
                        } else
                           dateTo.setHours(0, 0, 0, 0);

                        if (data > dateTo) continue;
                    }
                    if (filters.hasOwnProperty('Temp_From') && parseFloat(parsed[i]['Ch2_Value'].replace(',', '.')) < parseFloat(filters['Temp_From'])) continue;
                    if (filters.hasOwnProperty('Temp_To') && parseFloat(parsed[i]['Ch2_Value'].replace(',', '.')) > parseFloat(filters['Temp_To'])) continue;
                    if (filters.hasOwnProperty('Humid_From') && parseFloat(parsed[i]['Ch1_Value'].replace(',', '.')) < parseFloat(filters['Humid_From'])) continue;
                    if (filters.hasOwnProperty('Humid_To') && parseFloat(parsed[i]['Ch1_Value'].replace(',', '.')) > parseFloat(filters['Humid_To'])) continue;

                    toShow.push({
                        'position': parseInt(parsed[i]['Position']),
                        'dataRilevazione': data,
                        'umidita': parseFloat(parsed[i]['Ch1_Value'].replace(',', '.')) + parsed[i]['Ch1_Unit'].trim(),
                        'temperatura': parseFloat(parsed[i]['Ch2_Value'].replace(',', '.')) + parsed[i]['Ch2_unit'].trim().replace("DEGREE ", "°")
                    });
                }

                return toShow;
            },
            //INTERROGAZIONE DEL SISTEMA PER I DATI AMBIENTALI
            getFromRemote = filters => {
                return fetch(srvUrl +
                    'Api?jsonFilters=' +
                    JSON.stringify(filters)
                ).then(resp => {
                    if (resp.ok) {
                        uploadJson();
                        return resp.json();
                    } else
                        throw resp.json();
                }).catch(error => {
                    alert("Impossibile interroagare il sistema");
                    console.error(error);

                    return getFromLocalStorage(filters);
                })
            },
            //CLICK SU PULSANTE CERCA
            search = (btn) => {
                btn.innerHTML = btn.innerHTML + '<span class="spinner-border spinner-border-sm ml-1"></span>';
                getFromRemote(getFilters())
                    .then(render)
                    .then(() => btn.lastElementChild.remove());
            },
            //CLICK SU PULSANTE ESPORTA
            exportPDF = async (btn) => {
                btn.innerHTML = btn.innerHTML + '<span class="spinner-border spinner-border-sm ml-1"></span>';
                getFromRemote(getFilters())
                    .then(json => {
                        render(json);
                        const doc = new jsPDF('l', 'mm', 'a4'),
                            dataLabels = [],
                            aTemperature = [],
                            aUmidità = [];
                        let tempMU = '', humidMU = '';

                        for (let i = 0; i < json.length; i++) {
                            const formattedData = new Date(json[i].dataRilevazione).toLocaleString("it-IT", localeOpt);
                            dataLabels.push(formattedData);

                            aTemperature.push({ 'x': formattedData, 'y': parseFloat(json[i].temperatura.substring(0, json[i].temperatura.length - 2).replace(',', '.')) });
                            if (tempMU.length == 0)
                                tempMU = json[i].temperatura.substr(-2);

                            aUmidità.push({ 'x': formattedData, 'y': parseFloat(json[i].umidita.substring(0, json[i].temperatura.length - 2).replace(',', '.')) });
                            if (humidMU.length == 0)
                                humidMU = json[i].umidita.substr(-3);
                        }

                        //GRAFICO TEMPERATURA
                        drawChartInPdf(document.getElementById('chart-container').children.item(0), dataLabels, aTemperature, 'Temperature ' + tempMU, doc, true, 60);
                        //GRFICO UMIDITÀ
                        drawChartInPdf(document.getElementById('chart-container').children.item(1), dataLabels, aUmidità, 'Umidità ' + humidMU, doc, false, 100); //ULTIMO GRAFICO DA PRINTARE, GLI ALTRI FOGLI LI VOLGIO PORTRAIT
                        //TABELLA
                        doc.autoTable({ html: '#table-container>table' });
                        window.open(URL.createObjectURL(doc.output("blob")));
                    })
                    .then(() => btn.lastElementChild.remove());
            },
            //GESTIONE GRAFICI
            drawChartInPdf = (canvas, dataLabels, dataset, mainLabel, pdfDoc, landscape, maxYValue) => {
                new Chart(canvas, {
                    type: 'line',
                    data: {
                        labels: dataLabels,
                        datasets: [{
                            label: mainLabel,
                            data: dataset,
                            backgroundColor: ['rgb(54, 162, 235)'],
                            borderColor: ['rgb(221 11 11)'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        aspectRatio: 297 / 210, //ASPECT RATIO A4 LANDSCAPE
                        animation: false,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Misurazioni Stanza Donazioni',
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: maxYValue
                            },
                            xAxes: [{
                                type: 'time',
                                time: {
                                    unit: 'minute',
                                }
                            }],
                        }
                    },
                    plugins: [{
                        afterDraw: async function (chart, options) {
                            const canvasImg = chart.canvas.toDataURL();
                            pdfDoc.addImage(canvasImg, 'JPEG', 10, 10, 277, 190, '', 'SLOW');
                            pdfDoc.addPage('a4', landscape ? 'l' : 'p');
                            chart.destroy();
                        }
                    }]
                });
            },
            //CARICAMENTO DEI FILE CON I DATI DA SALVARE
            upload = (btn) => {
                const formData = new FormData(), fileList = document.getElementById('file-input').files;

                btn.innerHTML = btn.innerHTML + '<span class="spinner-border spinner-border-sm ml-1"></span>';

                for (let i = 0; i < fileList.length; i++) {
                    formData.append("files", fileList[i], fileList[i].name);
                }

                fetch(srvUrl + 'Api', {
                    method: 'POST',
                    body: formData
                }).then(resp => {
                    if (resp.ok)
                        return resp.json();
                    else
                        throw resp.json();
                }).catch(error => {
                    console.error(error);
                    return {
                        success: false,
                        message: "Si è verificato un errore durante l'upload",
                        localeSave: true
                    };
                }).then(json => {
                    btn.lastElementChild.remove();
                    if (!json.success) {
                        alert(json.message);
                    } else
                        uploadJson();

                    if (json.localeSave) {
                        const reader = new FileReader();

                        reader.onload = e => {
                            const rows = e.target.result.split(/\r|\n/), props = [], toStore = [];

                            rows[0].split('\t').forEach(propName => props.push(propName));

                            for (let i = 1; i < rows.length; i++) {
                                if (rows[i].length == 0) continue;

                                const row = rows[i].split('\t'), obj = {};

                                if (row.length == 0) continue;

                                for (let j = 0; j < props.length; j++) {
                                    obj[props[j]] = row[j];
                                }
                                toStore.push(obj);
                            }

                            const tmp = localStorage.getItem(localKey) != null ? JSON.parse(localStorage.getItem(localKey)) : [];
                            localStorage.setItem(localKey, JSON.stringify(tmp.concat(toStore)));
                        }

                        for (let i = 0; i < fileList.length; i++) {
                            reader.readAsBinaryString(fileList[i]);
                        }
                        alert('È comunque possibile interrogare il sistema sui dati appena caricati');
                    }
                });
            },
            //CARICAMENTO DEI DATI DA LOCAL STORAGE, SE PRESENTI
            uploadJson = () => {
                if (localStorage.getItem(localKey) == null) return;

                fetch(srvUrl + 'Api/Json', {
                    method: 'POST',
                    body: localStorage.getItem(localKey)
                }).then(resp => {
                    if (resp.ok)
                        return resp.json();
                    else
                        throw resp.json();
                }).catch(json => {
                    console.error(json);
                    return false;
                }).
                    then(bool => bool ? localStorage.removeItem(localKey) : null);
            };
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js" integrity="sha512-Wt1bJGtlnMtGP0dqNFH1xlkLBNpEodaiQ8ZN5JLA5wpc1sUlk/O5uuOMNgvzddzkpvZ9GLyYNa8w2s7rqiTk5Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="~/js/jspdf.min.js"></script>
    <script src="~/js/jspdf.plugin.autotable.min.js"></script>
}